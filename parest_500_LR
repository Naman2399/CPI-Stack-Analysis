{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1tYx6R18nUgfBgZpFa15jYqoi3nwcNGgb","timestamp":1697179340494}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Uploading CSV File"],"metadata":{"id":"iniF_-9EZ-sE"}},{"cell_type":"code","execution_count":29,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"_-CIKf_hZoOd","executionInfo":{"status":"ok","timestamp":1697550418702,"user_tz":-330,"elapsed":4182,"user":{"displayName":"Naman Malpani","userId":"03467115516653023208"}},"outputId":"2b8ac0e3-3e95-45ca-fb0b-97eee1e9dd0b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","source":["## Basic Dataframe Sample"],"metadata":{"id":"HtNIcNFXaSqg"}},{"cell_type":"code","source":["import pandas as pd\n","# Dataframe\n","file_id = \"/content/drive/MyDrive/Problem_2/parest_1000_1.log.csv\"\n","df = pd.read_csv(file_id)\n"],"metadata":{"id":"Rzb6wmWzaVIC","executionInfo":{"status":"ok","timestamp":1697550418702,"user_tz":-330,"elapsed":15,"user":{"displayName":"Naman Malpani","userId":"03467115516653023208"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["# Display first 10 rows\n","result = df.head(10)\n","print(\"First 10 rows\")\n","result"],"metadata":{"id":"mRFzBWujbswY","colab":{"base_uri":"https://localhost:8080/","height":481},"executionInfo":{"status":"ok","timestamp":1697550418702,"user_tz":-330,"elapsed":14,"user":{"displayName":"Naman Malpani","userId":"03467115516653023208"}},"outputId":"382efde0-2b9f-4bbd-8d31-d1b95f65427e"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["First 10 rows\n"]},{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0       time      cycles  instructions  branch-misses  \\\n","0           0   1.001036  2811712708    6369724315       18387506   \n","1           1   2.002190  2830009192    6012470525       17361133   \n","2           2   3.003396  2798867570    6018835685       18036083   \n","3           3   4.003793  2675829706    6013761775       18334409   \n","4           4   5.004936  2790517035    5918042111       18671432   \n","5           5   6.006050  2777635616    6004887892       17296163   \n","6           6   7.007167  2834760067    6185377093       20253339   \n","7           7   8.007798  2804485227    6154925704       19044983   \n","8           8   9.008937  2842175529    6473409849       19226031   \n","9           9  10.010061  2909122794    6861734985       19853584   \n","\n","   dTLB-load-misses  dTLB-store-misses  iTLB-load-misses  \\\n","0            557887             250528             19537   \n","1            486927              86617              8238   \n","2            431203              78004              9349   \n","3            513777              87634             10927   \n","4            640058             135342              7129   \n","5            578680             103349              9441   \n","6            403687              71082              8498   \n","7            516092              84137              8053   \n","8            467565              93238             10855   \n","9            489192              82867              5941   \n","\n","   L1-dcache-load-misses  L1-icache-load-misses  ...  LLC-store-misses  \\\n","0               59159360                1346254  ...           1514751   \n","1               53956588                 770919  ...            510765   \n","2               52386186                 724209  ...            746360   \n","3               56210585                 796635  ...            661072   \n","4               53062372                 648381  ...           1049153   \n","5               56542586                 596850  ...            829195   \n","6               53289160                 651404  ...           1073249   \n","7               57642132                 558800  ...            691314   \n","8               72427123                 578987  ...            725153   \n","9               56304118                 689155  ...           1187259   \n","\n","        cpi  Unnamed: 13  Unnamed: 14  Unnamed: 15  Unnamed: 16  Unnamed: 17  \\\n","0  0.441418          NaN          NaN          NaN          NaN          NaN   \n","1  0.470690          NaN          NaN          NaN          NaN          NaN   \n","2  0.465018          NaN          NaN          NaN          NaN          NaN   \n","3  0.444951          NaN          NaN          NaN          NaN          NaN   \n","4  0.471527          NaN          NaN          NaN          NaN          NaN   \n","5  0.462562          NaN          NaN          NaN          NaN          NaN   \n","6  0.458300          NaN          NaN          NaN          NaN          NaN   \n","7  0.455649          NaN          NaN          NaN          NaN          NaN   \n","8  0.439054          NaN          NaN          NaN          NaN          NaN   \n","9  0.423963          NaN          NaN          NaN          NaN          NaN   \n","\n","   Unnamed: 18  Unnamed: 19  Unnamed: 20  \n","0          NaN          NaN          NaN  \n","1          NaN          NaN          NaN  \n","2          NaN          NaN          NaN  \n","3          NaN          NaN          NaN  \n","4          NaN          NaN          NaN  \n","5          NaN          NaN          NaN  \n","6          NaN          NaN          NaN  \n","7          NaN          NaN          NaN  \n","8          NaN          NaN          NaN  \n","9          NaN          NaN          NaN  \n","\n","[10 rows x 21 columns]"],"text/html":["\n","  <div id=\"df-8b3bd9e5-2a01-48e7-9937-6daad66f9e31\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>time</th>\n","      <th>cycles</th>\n","      <th>instructions</th>\n","      <th>branch-misses</th>\n","      <th>dTLB-load-misses</th>\n","      <th>dTLB-store-misses</th>\n","      <th>iTLB-load-misses</th>\n","      <th>L1-dcache-load-misses</th>\n","      <th>L1-icache-load-misses</th>\n","      <th>...</th>\n","      <th>LLC-store-misses</th>\n","      <th>cpi</th>\n","      <th>Unnamed: 13</th>\n","      <th>Unnamed: 14</th>\n","      <th>Unnamed: 15</th>\n","      <th>Unnamed: 16</th>\n","      <th>Unnamed: 17</th>\n","      <th>Unnamed: 18</th>\n","      <th>Unnamed: 19</th>\n","      <th>Unnamed: 20</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>1.001036</td>\n","      <td>2811712708</td>\n","      <td>6369724315</td>\n","      <td>18387506</td>\n","      <td>557887</td>\n","      <td>250528</td>\n","      <td>19537</td>\n","      <td>59159360</td>\n","      <td>1346254</td>\n","      <td>...</td>\n","      <td>1514751</td>\n","      <td>0.441418</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2.002190</td>\n","      <td>2830009192</td>\n","      <td>6012470525</td>\n","      <td>17361133</td>\n","      <td>486927</td>\n","      <td>86617</td>\n","      <td>8238</td>\n","      <td>53956588</td>\n","      <td>770919</td>\n","      <td>...</td>\n","      <td>510765</td>\n","      <td>0.470690</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>3.003396</td>\n","      <td>2798867570</td>\n","      <td>6018835685</td>\n","      <td>18036083</td>\n","      <td>431203</td>\n","      <td>78004</td>\n","      <td>9349</td>\n","      <td>52386186</td>\n","      <td>724209</td>\n","      <td>...</td>\n","      <td>746360</td>\n","      <td>0.465018</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>4.003793</td>\n","      <td>2675829706</td>\n","      <td>6013761775</td>\n","      <td>18334409</td>\n","      <td>513777</td>\n","      <td>87634</td>\n","      <td>10927</td>\n","      <td>56210585</td>\n","      <td>796635</td>\n","      <td>...</td>\n","      <td>661072</td>\n","      <td>0.444951</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>5.004936</td>\n","      <td>2790517035</td>\n","      <td>5918042111</td>\n","      <td>18671432</td>\n","      <td>640058</td>\n","      <td>135342</td>\n","      <td>7129</td>\n","      <td>53062372</td>\n","      <td>648381</td>\n","      <td>...</td>\n","      <td>1049153</td>\n","      <td>0.471527</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>5</td>\n","      <td>6.006050</td>\n","      <td>2777635616</td>\n","      <td>6004887892</td>\n","      <td>17296163</td>\n","      <td>578680</td>\n","      <td>103349</td>\n","      <td>9441</td>\n","      <td>56542586</td>\n","      <td>596850</td>\n","      <td>...</td>\n","      <td>829195</td>\n","      <td>0.462562</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>6</td>\n","      <td>7.007167</td>\n","      <td>2834760067</td>\n","      <td>6185377093</td>\n","      <td>20253339</td>\n","      <td>403687</td>\n","      <td>71082</td>\n","      <td>8498</td>\n","      <td>53289160</td>\n","      <td>651404</td>\n","      <td>...</td>\n","      <td>1073249</td>\n","      <td>0.458300</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>7</td>\n","      <td>8.007798</td>\n","      <td>2804485227</td>\n","      <td>6154925704</td>\n","      <td>19044983</td>\n","      <td>516092</td>\n","      <td>84137</td>\n","      <td>8053</td>\n","      <td>57642132</td>\n","      <td>558800</td>\n","      <td>...</td>\n","      <td>691314</td>\n","      <td>0.455649</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>8</td>\n","      <td>9.008937</td>\n","      <td>2842175529</td>\n","      <td>6473409849</td>\n","      <td>19226031</td>\n","      <td>467565</td>\n","      <td>93238</td>\n","      <td>10855</td>\n","      <td>72427123</td>\n","      <td>578987</td>\n","      <td>...</td>\n","      <td>725153</td>\n","      <td>0.439054</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>9</td>\n","      <td>10.010061</td>\n","      <td>2909122794</td>\n","      <td>6861734985</td>\n","      <td>19853584</td>\n","      <td>489192</td>\n","      <td>82867</td>\n","      <td>5941</td>\n","      <td>56304118</td>\n","      <td>689155</td>\n","      <td>...</td>\n","      <td>1187259</td>\n","      <td>0.423963</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>10 rows × 21 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8b3bd9e5-2a01-48e7-9937-6daad66f9e31')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8b3bd9e5-2a01-48e7-9937-6daad66f9e31 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8b3bd9e5-2a01-48e7-9937-6daad66f9e31');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3ea26dd4-be9a-41eb-a7c4-a0b03d14a3c9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3ea26dd4-be9a-41eb-a7c4-a0b03d14a3c9')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3ea26dd4-be9a-41eb-a7c4-a0b03d14a3c9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["# Printing Column Values to Dataframe\n","for column in df.columns :\n","  print(\"Index : \", df.columns.get_loc(column) , \" - Column : \" , column)\n","\n","print(df.columns)"],"metadata":{"id":"KVdrGZZOb-7A","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1697550418702,"user_tz":-330,"elapsed":12,"user":{"displayName":"Naman Malpani","userId":"03467115516653023208"}},"outputId":"8af74df7-42a6-4557-a123-1d20d7532d40"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["Index :  0  - Column :  Unnamed: 0\n","Index :  1  - Column :  time\n","Index :  2  - Column :  cycles\n","Index :  3  - Column :  instructions\n","Index :  4  - Column :  branch-misses\n","Index :  5  - Column :  dTLB-load-misses\n","Index :  6  - Column :  dTLB-store-misses\n","Index :  7  - Column :  iTLB-load-misses\n","Index :  8  - Column :  L1-dcache-load-misses\n","Index :  9  - Column :  L1-icache-load-misses\n","Index :  10  - Column :  LLC-load-misses\n","Index :  11  - Column :  LLC-store-misses\n","Index :  12  - Column :  cpi\n","Index :  13  - Column :  Unnamed: 13\n","Index :  14  - Column :  Unnamed: 14\n","Index :  15  - Column :  Unnamed: 15\n","Index :  16  - Column :  Unnamed: 16\n","Index :  17  - Column :  Unnamed: 17\n","Index :  18  - Column :  Unnamed: 18\n","Index :  19  - Column :  Unnamed: 19\n","Index :  20  - Column :  Unnamed: 20\n","Index(['Unnamed: 0', 'time', 'cycles', 'instructions', 'branch-misses',\n","       'dTLB-load-misses', 'dTLB-store-misses', 'iTLB-load-misses',\n","       'L1-dcache-load-misses', 'L1-icache-load-misses', 'LLC-load-misses',\n","       'LLC-store-misses', 'cpi', 'Unnamed: 13', 'Unnamed: 14', 'Unnamed: 15',\n","       'Unnamed: 16', 'Unnamed: 17', 'Unnamed: 18', 'Unnamed: 19',\n","       'Unnamed: 20'],\n","      dtype='object')\n"]}]},{"cell_type":"markdown","source":["## Computing the Values of Column Name / Instructions"],"metadata":{"id":"26IPaON5OkYP"}},{"cell_type":"code","source":["columns = ['branch-misses',\n","       'dTLB-load-misses', 'dTLB-store-misses', 'iTLB-load-misses',\n","       'L1-dcache-load-misses', 'L1-icache-load-misses', 'LLC-load-misses',\n","       'LLC-store-misses']\n","\n","for column in columns :\n","  df[str(column) + '-' + 'instructions'] = df[column] / df['instructions']\n","\n","# Normalizing Data\n","for column in columns :\n","  column_name = str(column) + '-' + 'instructions'\n","  df[column_name + '-' + 'normalize'] = (df[column_name] - df[column_name].min()) / (df[column_name].max() - df[column_name].min())\n","\n","# Normalizing CPI\n","column_name = 'cpi'\n","df[column_name + '-' + 'normalize'] = (df[column_name] - df[column_name].min()) / (df[column_name].max() - df[column_name].min())\n","df"],"metadata":{"id":"-QW4KN6eOOzY","colab":{"base_uri":"https://localhost:8080/","height":495},"executionInfo":{"status":"ok","timestamp":1697550418702,"user_tz":-330,"elapsed":10,"user":{"displayName":"Naman Malpani","userId":"03467115516653023208"}},"outputId":"76ec654c-fc3e-4429-8325-8201b641e977"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Unnamed: 0        time      cycles  instructions  branch-misses  \\\n","0             0    1.001036  2811712708    6369724315       18387506   \n","1             1    2.002190  2830009192    6012470525       17361133   \n","2             2    3.003396  2798867570    6018835685       18036083   \n","3             3    4.003793  2675829706    6013761775       18334409   \n","4             4    5.004936  2790517035    5918042111       18671432   \n","..          ...         ...         ...           ...            ...   \n","488         488  489.523184  3049358402    6902201273       11233331   \n","489         489  490.523837  3062697509    7052553965       11240128   \n","490         490  491.524953  3049502134    6806937430       11277862   \n","491         491  492.526059  3068278082    7126998887       11579464   \n","492         492  493.527170  3063414689    7108649915       11413920   \n","\n","     dTLB-load-misses  dTLB-store-misses  iTLB-load-misses  \\\n","0              557887             250528             19537   \n","1              486927              86617              8238   \n","2              431203              78004              9349   \n","3              513777              87634             10927   \n","4              640058             135342              7129   \n","..                ...                ...               ...   \n","488           1032903              13478              5770   \n","489           1064557              12954              4670   \n","490           1127590              11994              5310   \n","491           1050111              12199              4575   \n","492           1054985              12975              5352   \n","\n","     L1-dcache-load-misses  L1-icache-load-misses  ...  \\\n","0                 59159360                1346254  ...   \n","1                 53956588                 770919  ...   \n","2                 52386186                 724209  ...   \n","3                 56210585                 796635  ...   \n","4                 53062372                 648381  ...   \n","..                     ...                    ...  ...   \n","488              217813638                 270477  ...   \n","489              221972077                 254973  ...   \n","490              214471590                 269524  ...   \n","491              223188145                 207505  ...   \n","492              222906422                 222647  ...   \n","\n","     LLC-store-misses-instructions  branch-misses-instructions-normalize  \\\n","0                         0.000238                              0.479231   \n","1                         0.000085                              0.479380   \n","2                         0.000124                              0.499332   \n","3                         0.000110                              0.508867   \n","4                         0.000177                              0.528301   \n","..                             ...                                   ...   \n","488                       0.000007                              0.248929   \n","489                       0.000006                              0.242759   \n","490                       0.000004                              0.254291   \n","491                       0.000006                              0.248422   \n","492                       0.000006                              0.244930   \n","\n","     dTLB-load-misses-instructions-normalize  \\\n","0                                   0.515159   \n","1                                   0.475754   \n","2                                   0.419948   \n","3                                   0.502315   \n","4                                   0.638008   \n","..                                       ...   \n","488                                 0.885829   \n","489                                 0.893581   \n","490                                 0.981415   \n","491                                 0.872059   \n","492                                 0.878425   \n","\n","     dTLB-store-misses-instructions-normalize  \\\n","0                                    1.000000   \n","1                                    0.356511   \n","2                                    0.319173   \n","3                                    0.360797   \n","4                                    0.575006   \n","..                                        ...   \n","488                                  0.034997   \n","489                                  0.032004   \n","490                                  0.030074   \n","491                                  0.028774   \n","492                                  0.031706   \n","\n","     iTLB-load-misses-instructions-normalize  \\\n","0                                   0.470954   \n","1                                   0.189885   \n","2                                   0.220217   \n","3                                   0.263894   \n","4                                   0.162469   \n","..                                       ...   \n","488                                 0.101410   \n","489                                 0.072625   \n","490                                 0.092155   \n","491                                 0.069272   \n","492                                 0.087650   \n","\n","     L1-dcache-load-misses-instructions-normalize  \\\n","0                                        0.192258   \n","1                                        0.183104   \n","2                                        0.175207   \n","3                                        0.193993   \n","4                                        0.182873   \n","..                                            ...   \n","488                                      0.842600   \n","489                                      0.840173   \n","490                                      0.841160   \n","491                                      0.835555   \n","492                                      0.836758   \n","\n","     L1-icache-load-misses-instructions-normalize  \\\n","0                                        0.344431   \n","1                                        0.199965   \n","2                                        0.186243   \n","3                                        0.207348   \n","4                                        0.167538   \n","..                                            ...   \n","488                                      0.045245   \n","489                                      0.039973   \n","490                                      0.045955   \n","491                                      0.027743   \n","492                                      0.031575   \n","\n","     LLC-load-misses-instructions-normalize  \\\n","0                                  0.523609   \n","1                                  0.697933   \n","2                                  0.720193   \n","3                                  0.658307   \n","4                                  0.743009   \n","..                                      ...   \n","488                                0.331484   \n","489                                0.251057   \n","490                                0.352805   \n","491                                0.214371   \n","492                                0.237376   \n","\n","     LLC-store-misses-instructions-normalize  cpi-normalize  \n","0                                   0.200956       0.598641  \n","1                                   0.071563       0.753639  \n","2                                   0.104622       0.723606  \n","3                                   0.092705       0.617348  \n","4                                   0.149721       0.758072  \n","..                                       ...            ...  \n","488                                 0.005162       0.600636  \n","489                                 0.004669       0.560779  \n","490                                 0.003421       0.633488  \n","491                                 0.004452       0.540906  \n","492                                 0.004981       0.543167  \n","\n","[493 rows x 38 columns]"],"text/html":["\n","  <div id=\"df-9c4a6f8b-b835-4232-8dac-7ff62c6a28ef\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>time</th>\n","      <th>cycles</th>\n","      <th>instructions</th>\n","      <th>branch-misses</th>\n","      <th>dTLB-load-misses</th>\n","      <th>dTLB-store-misses</th>\n","      <th>iTLB-load-misses</th>\n","      <th>L1-dcache-load-misses</th>\n","      <th>L1-icache-load-misses</th>\n","      <th>...</th>\n","      <th>LLC-store-misses-instructions</th>\n","      <th>branch-misses-instructions-normalize</th>\n","      <th>dTLB-load-misses-instructions-normalize</th>\n","      <th>dTLB-store-misses-instructions-normalize</th>\n","      <th>iTLB-load-misses-instructions-normalize</th>\n","      <th>L1-dcache-load-misses-instructions-normalize</th>\n","      <th>L1-icache-load-misses-instructions-normalize</th>\n","      <th>LLC-load-misses-instructions-normalize</th>\n","      <th>LLC-store-misses-instructions-normalize</th>\n","      <th>cpi-normalize</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>1.001036</td>\n","      <td>2811712708</td>\n","      <td>6369724315</td>\n","      <td>18387506</td>\n","      <td>557887</td>\n","      <td>250528</td>\n","      <td>19537</td>\n","      <td>59159360</td>\n","      <td>1346254</td>\n","      <td>...</td>\n","      <td>0.000238</td>\n","      <td>0.479231</td>\n","      <td>0.515159</td>\n","      <td>1.000000</td>\n","      <td>0.470954</td>\n","      <td>0.192258</td>\n","      <td>0.344431</td>\n","      <td>0.523609</td>\n","      <td>0.200956</td>\n","      <td>0.598641</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2.002190</td>\n","      <td>2830009192</td>\n","      <td>6012470525</td>\n","      <td>17361133</td>\n","      <td>486927</td>\n","      <td>86617</td>\n","      <td>8238</td>\n","      <td>53956588</td>\n","      <td>770919</td>\n","      <td>...</td>\n","      <td>0.000085</td>\n","      <td>0.479380</td>\n","      <td>0.475754</td>\n","      <td>0.356511</td>\n","      <td>0.189885</td>\n","      <td>0.183104</td>\n","      <td>0.199965</td>\n","      <td>0.697933</td>\n","      <td>0.071563</td>\n","      <td>0.753639</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>3.003396</td>\n","      <td>2798867570</td>\n","      <td>6018835685</td>\n","      <td>18036083</td>\n","      <td>431203</td>\n","      <td>78004</td>\n","      <td>9349</td>\n","      <td>52386186</td>\n","      <td>724209</td>\n","      <td>...</td>\n","      <td>0.000124</td>\n","      <td>0.499332</td>\n","      <td>0.419948</td>\n","      <td>0.319173</td>\n","      <td>0.220217</td>\n","      <td>0.175207</td>\n","      <td>0.186243</td>\n","      <td>0.720193</td>\n","      <td>0.104622</td>\n","      <td>0.723606</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>4.003793</td>\n","      <td>2675829706</td>\n","      <td>6013761775</td>\n","      <td>18334409</td>\n","      <td>513777</td>\n","      <td>87634</td>\n","      <td>10927</td>\n","      <td>56210585</td>\n","      <td>796635</td>\n","      <td>...</td>\n","      <td>0.000110</td>\n","      <td>0.508867</td>\n","      <td>0.502315</td>\n","      <td>0.360797</td>\n","      <td>0.263894</td>\n","      <td>0.193993</td>\n","      <td>0.207348</td>\n","      <td>0.658307</td>\n","      <td>0.092705</td>\n","      <td>0.617348</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>5.004936</td>\n","      <td>2790517035</td>\n","      <td>5918042111</td>\n","      <td>18671432</td>\n","      <td>640058</td>\n","      <td>135342</td>\n","      <td>7129</td>\n","      <td>53062372</td>\n","      <td>648381</td>\n","      <td>...</td>\n","      <td>0.000177</td>\n","      <td>0.528301</td>\n","      <td>0.638008</td>\n","      <td>0.575006</td>\n","      <td>0.162469</td>\n","      <td>0.182873</td>\n","      <td>0.167538</td>\n","      <td>0.743009</td>\n","      <td>0.149721</td>\n","      <td>0.758072</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>488</th>\n","      <td>488</td>\n","      <td>489.523184</td>\n","      <td>3049358402</td>\n","      <td>6902201273</td>\n","      <td>11233331</td>\n","      <td>1032903</td>\n","      <td>13478</td>\n","      <td>5770</td>\n","      <td>217813638</td>\n","      <td>270477</td>\n","      <td>...</td>\n","      <td>0.000007</td>\n","      <td>0.248929</td>\n","      <td>0.885829</td>\n","      <td>0.034997</td>\n","      <td>0.101410</td>\n","      <td>0.842600</td>\n","      <td>0.045245</td>\n","      <td>0.331484</td>\n","      <td>0.005162</td>\n","      <td>0.600636</td>\n","    </tr>\n","    <tr>\n","      <th>489</th>\n","      <td>489</td>\n","      <td>490.523837</td>\n","      <td>3062697509</td>\n","      <td>7052553965</td>\n","      <td>11240128</td>\n","      <td>1064557</td>\n","      <td>12954</td>\n","      <td>4670</td>\n","      <td>221972077</td>\n","      <td>254973</td>\n","      <td>...</td>\n","      <td>0.000006</td>\n","      <td>0.242759</td>\n","      <td>0.893581</td>\n","      <td>0.032004</td>\n","      <td>0.072625</td>\n","      <td>0.840173</td>\n","      <td>0.039973</td>\n","      <td>0.251057</td>\n","      <td>0.004669</td>\n","      <td>0.560779</td>\n","    </tr>\n","    <tr>\n","      <th>490</th>\n","      <td>490</td>\n","      <td>491.524953</td>\n","      <td>3049502134</td>\n","      <td>6806937430</td>\n","      <td>11277862</td>\n","      <td>1127590</td>\n","      <td>11994</td>\n","      <td>5310</td>\n","      <td>214471590</td>\n","      <td>269524</td>\n","      <td>...</td>\n","      <td>0.000004</td>\n","      <td>0.254291</td>\n","      <td>0.981415</td>\n","      <td>0.030074</td>\n","      <td>0.092155</td>\n","      <td>0.841160</td>\n","      <td>0.045955</td>\n","      <td>0.352805</td>\n","      <td>0.003421</td>\n","      <td>0.633488</td>\n","    </tr>\n","    <tr>\n","      <th>491</th>\n","      <td>491</td>\n","      <td>492.526059</td>\n","      <td>3068278082</td>\n","      <td>7126998887</td>\n","      <td>11579464</td>\n","      <td>1050111</td>\n","      <td>12199</td>\n","      <td>4575</td>\n","      <td>223188145</td>\n","      <td>207505</td>\n","      <td>...</td>\n","      <td>0.000006</td>\n","      <td>0.248422</td>\n","      <td>0.872059</td>\n","      <td>0.028774</td>\n","      <td>0.069272</td>\n","      <td>0.835555</td>\n","      <td>0.027743</td>\n","      <td>0.214371</td>\n","      <td>0.004452</td>\n","      <td>0.540906</td>\n","    </tr>\n","    <tr>\n","      <th>492</th>\n","      <td>492</td>\n","      <td>493.527170</td>\n","      <td>3063414689</td>\n","      <td>7108649915</td>\n","      <td>11413920</td>\n","      <td>1054985</td>\n","      <td>12975</td>\n","      <td>5352</td>\n","      <td>222906422</td>\n","      <td>222647</td>\n","      <td>...</td>\n","      <td>0.000006</td>\n","      <td>0.244930</td>\n","      <td>0.878425</td>\n","      <td>0.031706</td>\n","      <td>0.087650</td>\n","      <td>0.836758</td>\n","      <td>0.031575</td>\n","      <td>0.237376</td>\n","      <td>0.004981</td>\n","      <td>0.543167</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>493 rows × 38 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9c4a6f8b-b835-4232-8dac-7ff62c6a28ef')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9c4a6f8b-b835-4232-8dac-7ff62c6a28ef button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9c4a6f8b-b835-4232-8dac-7ff62c6a28ef');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2351e241-7d04-4ceb-8fc6-e5f8281db764\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2351e241-7d04-4ceb-8fc6-e5f8281db764')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2351e241-7d04-4ceb-8fc6-e5f8281db764 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["# Printing Column Values to Dataframe\n","for column in df.columns :\n","  print(\"Index : \", df.columns.get_loc(column) , \" - Column : \" , column)\n","\n","print(df.columns)\n"],"metadata":{"id":"2nz3RfqFQgye","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1697550418702,"user_tz":-330,"elapsed":9,"user":{"displayName":"Naman Malpani","userId":"03467115516653023208"}},"outputId":"cab6b612-c616-4870-e8d5-39e1941babf4"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["Index :  0  - Column :  Unnamed: 0\n","Index :  1  - Column :  time\n","Index :  2  - Column :  cycles\n","Index :  3  - Column :  instructions\n","Index :  4  - Column :  branch-misses\n","Index :  5  - Column :  dTLB-load-misses\n","Index :  6  - Column :  dTLB-store-misses\n","Index :  7  - Column :  iTLB-load-misses\n","Index :  8  - Column :  L1-dcache-load-misses\n","Index :  9  - Column :  L1-icache-load-misses\n","Index :  10  - Column :  LLC-load-misses\n","Index :  11  - Column :  LLC-store-misses\n","Index :  12  - Column :  cpi\n","Index :  13  - Column :  Unnamed: 13\n","Index :  14  - Column :  Unnamed: 14\n","Index :  15  - Column :  Unnamed: 15\n","Index :  16  - Column :  Unnamed: 16\n","Index :  17  - Column :  Unnamed: 17\n","Index :  18  - Column :  Unnamed: 18\n","Index :  19  - Column :  Unnamed: 19\n","Index :  20  - Column :  Unnamed: 20\n","Index :  21  - Column :  branch-misses-instructions\n","Index :  22  - Column :  dTLB-load-misses-instructions\n","Index :  23  - Column :  dTLB-store-misses-instructions\n","Index :  24  - Column :  iTLB-load-misses-instructions\n","Index :  25  - Column :  L1-dcache-load-misses-instructions\n","Index :  26  - Column :  L1-icache-load-misses-instructions\n","Index :  27  - Column :  LLC-load-misses-instructions\n","Index :  28  - Column :  LLC-store-misses-instructions\n","Index :  29  - Column :  branch-misses-instructions-normalize\n","Index :  30  - Column :  dTLB-load-misses-instructions-normalize\n","Index :  31  - Column :  dTLB-store-misses-instructions-normalize\n","Index :  32  - Column :  iTLB-load-misses-instructions-normalize\n","Index :  33  - Column :  L1-dcache-load-misses-instructions-normalize\n","Index :  34  - Column :  L1-icache-load-misses-instructions-normalize\n","Index :  35  - Column :  LLC-load-misses-instructions-normalize\n","Index :  36  - Column :  LLC-store-misses-instructions-normalize\n","Index :  37  - Column :  cpi-normalize\n","Index(['Unnamed: 0', 'time', 'cycles', 'instructions', 'branch-misses',\n","       'dTLB-load-misses', 'dTLB-store-misses', 'iTLB-load-misses',\n","       'L1-dcache-load-misses', 'L1-icache-load-misses', 'LLC-load-misses',\n","       'LLC-store-misses', 'cpi', 'Unnamed: 13', 'Unnamed: 14', 'Unnamed: 15',\n","       'Unnamed: 16', 'Unnamed: 17', 'Unnamed: 18', 'Unnamed: 19',\n","       'Unnamed: 20', 'branch-misses-instructions',\n","       'dTLB-load-misses-instructions', 'dTLB-store-misses-instructions',\n","       'iTLB-load-misses-instructions', 'L1-dcache-load-misses-instructions',\n","       'L1-icache-load-misses-instructions', 'LLC-load-misses-instructions',\n","       'LLC-store-misses-instructions', 'branch-misses-instructions-normalize',\n","       'dTLB-load-misses-instructions-normalize',\n","       'dTLB-store-misses-instructions-normalize',\n","       'iTLB-load-misses-instructions-normalize',\n","       'L1-dcache-load-misses-instructions-normalize',\n","       'L1-icache-load-misses-instructions-normalize',\n","       'LLC-load-misses-instructions-normalize',\n","       'LLC-store-misses-instructions-normalize', 'cpi-normalize'],\n","      dtype='object')\n"]}]},{"cell_type":"markdown","source":["# Train Test Split"],"metadata":{"id":"ms0igq4Ujj7s"}},{"cell_type":"code","source":["import statsmodels.api as sm"],"metadata":{"id":"VvK9LrlnTVcl","executionInfo":{"status":"ok","timestamp":1697550418703,"user_tz":-330,"elapsed":9,"user":{"displayName":"Naman Malpani","userId":"03467115516653023208"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["\n","X = df[['branch-misses-instructions-normalize',\n","       'dTLB-load-misses-instructions-normalize',\n","       'dTLB-store-misses-instructions-normalize',\n","       'iTLB-load-misses-instructions-normalize',\n","       'L1-dcache-load-misses-instructions-normalize',\n","       'L1-icache-load-misses-instructions-normalize',\n","       'LLC-load-misses-instructions-normalize',\n","       'LLC-store-misses-instructions-normalize']]\n","X = sm.add_constant(X)\n","\n","Y = df[['cpi']]\n","\n","\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, Y_train, Y_test = train_test_split(X,Y ,\n","                                   random_state=104,\n","                                   test_size=0.05,\n","                                   shuffle=True)\n","print(\"X Train : \", X_train.shape)\n","print(\"Y Train : \", Y_train.shape)\n","print(\"X Test : \", X_test.shape)\n","print(\"Y Test : \", Y_test.shape)"],"metadata":{"id":"OBuwjsD1jruj","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1697550418703,"user_tz":-330,"elapsed":8,"user":{"displayName":"Naman Malpani","userId":"03467115516653023208"}},"outputId":"5ecff311-7eae-4286-b3ff-a6d6dd648827"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["X Train :  (468, 9)\n","Y Train :  (468, 1)\n","X Test :  (25, 9)\n","Y Test :  (25, 1)\n"]}]},{"cell_type":"markdown","source":["**Importing Libraries**"],"metadata":{"id":"OmozwOESnuaw"}},{"cell_type":"markdown","source":["# OLS - Linear **Regression**\n","## Splititng Code - X and Y Dataset\n","\n"],"metadata":{"id":"dHscDSPiXj9j"}},{"cell_type":"code","source":["model = sm.OLS(Y_train, X_train).fit()\n","model.summary()"],"metadata":{"id":"HWhxxYfmTe2c","colab":{"base_uri":"https://localhost:8080/","height":587},"executionInfo":{"status":"ok","timestamp":1697550419701,"user_tz":-330,"elapsed":1004,"user":{"displayName":"Naman Malpani","userId":"03467115516653023208"}},"outputId":"4b516810-287a-41d8-e363-3ca94e1065db"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<class 'statsmodels.iolib.summary.Summary'>\n","\"\"\"\n","                            OLS Regression Results                            \n","==============================================================================\n","Dep. Variable:                    cpi   R-squared:                       0.917\n","Model:                            OLS   Adj. R-squared:                  0.916\n","Method:                 Least Squares   F-statistic:                     636.6\n","Date:                Tue, 17 Oct 2023   Prob (F-statistic):          5.53e-243\n","Time:                        13:46:58   Log-Likelihood:                 1633.8\n","No. Observations:                 468   AIC:                            -3250.\n","Df Residuals:                     459   BIC:                            -3212.\n","Df Model:                           8                                         \n","Covariance Type:            nonrobust                                         \n","================================================================================================================\n","                                                   coef    std err          t      P>|t|      [0.025      0.975]\n","----------------------------------------------------------------------------------------------------------------\n","const                                            0.3602      0.003    108.783      0.000       0.354       0.367\n","branch-misses-instructions-normalize             0.0664      0.004     15.388      0.000       0.058       0.075\n","dTLB-load-misses-instructions-normalize          0.0039      0.002      1.603      0.110      -0.001       0.009\n","dTLB-store-misses-instructions-normalize         0.0043      0.006      0.659      0.510      -0.008       0.017\n","iTLB-load-misses-instructions-normalize          0.0093      0.007      1.380      0.168      -0.004       0.023\n","L1-dcache-load-misses-instructions-normalize     0.0417      0.002     17.150      0.000       0.037       0.047\n","L1-icache-load-misses-instructions-normalize    -0.0537      0.005    -10.590      0.000      -0.064      -0.044\n","LLC-load-misses-instructions-normalize           0.0829      0.004     20.118      0.000       0.075       0.091\n","LLC-store-misses-instructions-normalize         -0.0144      0.005     -2.800      0.005      -0.025      -0.004\n","==============================================================================\n","Omnibus:                       65.121   Durbin-Watson:                   2.051\n","Prob(Omnibus):                  0.000   Jarque-Bera (JB):              243.148\n","Skew:                           0.571   Prob(JB):                     1.59e-53\n","Kurtosis:                       6.341   Cond. No.                         34.6\n","==============================================================================\n","\n","Notes:\n","[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n","\"\"\""],"text/html":["<table class=\"simpletable\">\n","<caption>OLS Regression Results</caption>\n","<tr>\n","  <th>Dep. Variable:</th>           <td>cpi</td>       <th>  R-squared:         </th> <td>   0.917</td> \n","</tr>\n","<tr>\n","  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.916</td> \n","</tr>\n","<tr>\n","  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   636.6</td> \n","</tr>\n","<tr>\n","  <th>Date:</th>             <td>Tue, 17 Oct 2023</td> <th>  Prob (F-statistic):</th> <td>5.53e-243</td>\n","</tr>\n","<tr>\n","  <th>Time:</th>                 <td>13:46:58</td>     <th>  Log-Likelihood:    </th> <td>  1633.8</td> \n","</tr>\n","<tr>\n","  <th>No. Observations:</th>      <td>   468</td>      <th>  AIC:               </th> <td>  -3250.</td> \n","</tr>\n","<tr>\n","  <th>Df Residuals:</th>          <td>   459</td>      <th>  BIC:               </th> <td>  -3212.</td> \n","</tr>\n","<tr>\n","  <th>Df Model:</th>              <td>     8</td>      <th>                     </th>     <td> </td>    \n","</tr>\n","<tr>\n","  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","                        <td></td>                          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n","</tr>\n","<tr>\n","  <th>const</th>                                        <td>    0.3602</td> <td>    0.003</td> <td>  108.783</td> <td> 0.000</td> <td>    0.354</td> <td>    0.367</td>\n","</tr>\n","<tr>\n","  <th>branch-misses-instructions-normalize</th>         <td>    0.0664</td> <td>    0.004</td> <td>   15.388</td> <td> 0.000</td> <td>    0.058</td> <td>    0.075</td>\n","</tr>\n","<tr>\n","  <th>dTLB-load-misses-instructions-normalize</th>      <td>    0.0039</td> <td>    0.002</td> <td>    1.603</td> <td> 0.110</td> <td>   -0.001</td> <td>    0.009</td>\n","</tr>\n","<tr>\n","  <th>dTLB-store-misses-instructions-normalize</th>     <td>    0.0043</td> <td>    0.006</td> <td>    0.659</td> <td> 0.510</td> <td>   -0.008</td> <td>    0.017</td>\n","</tr>\n","<tr>\n","  <th>iTLB-load-misses-instructions-normalize</th>      <td>    0.0093</td> <td>    0.007</td> <td>    1.380</td> <td> 0.168</td> <td>   -0.004</td> <td>    0.023</td>\n","</tr>\n","<tr>\n","  <th>L1-dcache-load-misses-instructions-normalize</th> <td>    0.0417</td> <td>    0.002</td> <td>   17.150</td> <td> 0.000</td> <td>    0.037</td> <td>    0.047</td>\n","</tr>\n","<tr>\n","  <th>L1-icache-load-misses-instructions-normalize</th> <td>   -0.0537</td> <td>    0.005</td> <td>  -10.590</td> <td> 0.000</td> <td>   -0.064</td> <td>   -0.044</td>\n","</tr>\n","<tr>\n","  <th>LLC-load-misses-instructions-normalize</th>       <td>    0.0829</td> <td>    0.004</td> <td>   20.118</td> <td> 0.000</td> <td>    0.075</td> <td>    0.091</td>\n","</tr>\n","<tr>\n","  <th>LLC-store-misses-instructions-normalize</th>      <td>   -0.0144</td> <td>    0.005</td> <td>   -2.800</td> <td> 0.005</td> <td>   -0.025</td> <td>   -0.004</td>\n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","  <th>Omnibus:</th>       <td>65.121</td> <th>  Durbin-Watson:     </th> <td>   2.051</td>\n","</tr>\n","<tr>\n","  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 243.148</td>\n","</tr>\n","<tr>\n","  <th>Skew:</th>          <td> 0.571</td> <th>  Prob(JB):          </th> <td>1.59e-53</td>\n","</tr>\n","<tr>\n","  <th>Kurtosis:</th>      <td> 6.341</td> <th>  Cond. No.          </th> <td>    34.6</td>\n","</tr>\n","</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."],"text/latex":"\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}                               &       cpi        & \\textbf{  R-squared:         } &     0.917   \\\\\n\\textbf{Model:}                                       &       OLS        & \\textbf{  Adj. R-squared:    } &     0.916   \\\\\n\\textbf{Method:}                                      &  Least Squares   & \\textbf{  F-statistic:       } &     636.6   \\\\\n\\textbf{Date:}                                        & Tue, 17 Oct 2023 & \\textbf{  Prob (F-statistic):} & 5.53e-243   \\\\\n\\textbf{Time:}                                        &     13:46:58     & \\textbf{  Log-Likelihood:    } &    1633.8   \\\\\n\\textbf{No. Observations:}                            &         468      & \\textbf{  AIC:               } &    -3250.   \\\\\n\\textbf{Df Residuals:}                                &         459      & \\textbf{  BIC:               } &    -3212.   \\\\\n\\textbf{Df Model:}                                    &           8      & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}                             &    nonrobust     & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                                                      & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{const}                                        &       0.3602  &        0.003     &   108.783  &         0.000        &        0.354    &        0.367     \\\\\n\\textbf{branch-misses-instructions-normalize}         &       0.0664  &        0.004     &    15.388  &         0.000        &        0.058    &        0.075     \\\\\n\\textbf{dTLB-load-misses-instructions-normalize}      &       0.0039  &        0.002     &     1.603  &         0.110        &       -0.001    &        0.009     \\\\\n\\textbf{dTLB-store-misses-instructions-normalize}     &       0.0043  &        0.006     &     0.659  &         0.510        &       -0.008    &        0.017     \\\\\n\\textbf{iTLB-load-misses-instructions-normalize}      &       0.0093  &        0.007     &     1.380  &         0.168        &       -0.004    &        0.023     \\\\\n\\textbf{L1-dcache-load-misses-instructions-normalize} &       0.0417  &        0.002     &    17.150  &         0.000        &        0.037    &        0.047     \\\\\n\\textbf{L1-icache-load-misses-instructions-normalize} &      -0.0537  &        0.005     &   -10.590  &         0.000        &       -0.064    &       -0.044     \\\\\n\\textbf{LLC-load-misses-instructions-normalize}       &       0.0829  &        0.004     &    20.118  &         0.000        &        0.075    &        0.091     \\\\\n\\textbf{LLC-store-misses-instructions-normalize}      &      -0.0144  &        0.005     &    -2.800  &         0.005        &       -0.025    &       -0.004     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Omnibus:}       & 65.121 & \\textbf{  Durbin-Watson:     } &    2.051  \\\\\n\\textbf{Prob(Omnibus):} &  0.000 & \\textbf{  Jarque-Bera (JB):  } &  243.148  \\\\\n\\textbf{Skew:}          &  0.571 & \\textbf{  Prob(JB):          } & 1.59e-53  \\\\\n\\textbf{Kurtosis:}      &  6.341 & \\textbf{  Cond. No.          } &     34.6  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{OLS Regression Results}\n\\end{center}\n\nNotes: \\newline\n [1] Standard Errors assume that the covariance matrix of the errors is correctly specified."},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["from sklearn.linear_model import Lasso\n","regressor = Lasso(alpha=0.00000000001,positive=True,max_iter=1000000)\n","temp=regressor.fit(X_train,Y_train)\n","\n","# Printing Cofficients :\n","coeff_df = pd.DataFrame(temp.coef_, X_train.columns, columns=['Cofficient'])\n","print(coeff_df)\n","print()\n","\n","print('Linear Intercept term: ',temp.intercept_) # This gives us the intercept term\n","\n","Y_pred = regressor.predict(X_test)\n","y_pred_overall = regressor.predict(X)\n","\n","from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n","from math import sqrt\n","from scipy.stats import ttest_ind\n","import numpy as np\n","\n","\n","print()\n","rmse = sqrt(mean_squared_error(Y_test, Y_pred))\n","print(\"RMSE:- \",rmse)\n","rsq = r2_score(Y_test,Y_pred) #R-Squared on the training data\n","print('R-square: ',rsq)\n","rad=1-(((1-rsq)*(len(Y)-1))/(len(Y)-1-X.shape[1]))\n","print('Adjusted R-square: ', rad)\n","F=(rsq/(1-rsq))*((len(Y)-1-X.shape[1])/X.shape[1])\n","print('F value :',F)\n","print(\"Pvalues :\",ttest_ind(X, Y).pvalue)\n","\n","\n","Y_test1 = Y_test.to_numpy().flatten()\n","print(Y_test1.shape)\n","print(Y_pred.shape)\n","res= Y_test1 - Y_pred\n","print('Sum of Residuals :', np.sum(res))\n","# print('Residuals :', res)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"BPmH7m4_yE2q","executionInfo":{"status":"ok","timestamp":1697550419702,"user_tz":-330,"elapsed":15,"user":{"displayName":"Naman Malpani","userId":"03467115516653023208"}},"outputId":"30cb1332-1549-40bf-c3c6-853db40f2341"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["                                              Cofficient\n","const                                           0.000000\n","branch-misses-instructions-normalize            0.129870\n","dTLB-load-misses-instructions-normalize         0.015783\n","dTLB-store-misses-instructions-normalize        0.000000\n","iTLB-load-misses-instructions-normalize         0.000000\n","L1-dcache-load-misses-instructions-normalize    0.072291\n","L1-icache-load-misses-instructions-normalize    0.000000\n","LLC-load-misses-instructions-normalize          0.069793\n","LLC-store-misses-instructions-normalize         0.000000\n","\n","Linear Intercept term:  [0.30900985]\n","\n","RMSE:-  0.012893463002840949\n","R-square:  0.8049115877262376\n","Adjusted R-square:  0.8012763999198942\n","F value : 221.42228424117943\n","Pvalues : [0.00000000e+000 3.68404149e-010 2.69650043e-182 0.00000000e+000\n"," 1.86344240e-230 6.90488622e-138 1.14393075e-176 1.77745267e-261\n"," 4.43389769e-299]\n","(25,)\n","(25,)\n","Sum of Residuals : 0.02046678766356752\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/scipy/stats/_axis_nan_policy.py:551: RuntimeWarning: Precision loss occurred in moment calculation due to catastrophic cancellation. This occurs when the data are nearly identical. Results may be unreliable.\n","  res = hypotest_fun_out(*samples, axis=axis, **kwds)\n"]}]},{"cell_type":"markdown","source":["# Plot Graph"],"metadata":{"id":"Zz-gBpwyYKmi"}},{"cell_type":"code","source":["from statsmodels.tools.eval_measures import rmse\n","\n","\n","# Trying to Plot the Stack of the Predictied Values of the model w.r.t. to the CPI\n","Y_pred = regressor.predict(X_test)\n","print(\"Y Test : \", Y_test.shape)\n","print(\"Y Prediction : \", Y_pred.shape)\n","# print(Y_test)\n","# print(Y_pred)\n","\n","\n","# Import Package\n","import matplotlib.pyplot as plt\n","\n","# Line Plot\n","x_axis = [i+1 for i in range(Y_test.shape[0])]\n","plt.style.use('default')\n","plt.title(\"CPI - Predicted vs Test\")\n","plt.ylabel(\"CPI\")\n","plt.xlabel(\"No. of Observations\")\n","\n","plt.plot(x_axis, Y_test, label = \"Test\", linestyle =  \"-\" )\n","plt.plot(x_axis, Y_pred, label = \"Prediction\", linestyle = '--')\n","plt.legend()\n","plt.show()"],"metadata":{"id":"O4N5luDBYKFr","colab":{"base_uri":"https://localhost:8080/","height":507},"executionInfo":{"status":"ok","timestamp":1697550419702,"user_tz":-330,"elapsed":13,"user":{"displayName":"Naman Malpani","userId":"03467115516653023208"}},"outputId":"85ec5cf2-6e90-47de-c7ff-e73c0a2271a1"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["Y Test :  (25, 1)\n","Y Prediction :  (25,)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Computing CPI Stack"],"metadata":{"id":"1g-XYFTD_VY-"}},{"cell_type":"code","source":["cpi_stack = ['const', 'branch-misses-instructions-normalize',\n","       'dTLB-load-misses-instructions-normalize',\n","       'dTLB-store-misses-instructions-normalize',\n","       'iTLB-load-misses-instructions-normalize',\n","       'L1-dcache-load-misses-instructions-normalize',\n","       'L1-icache-load-misses-instructions-normalize',\n","       'LLC-load-misses-instructions-normalize',\n","       'LLC-store-misses-instructions-normalize']\n","\n","\n","# Printing Cofficients :\n","coeff_df = pd.DataFrame(temp.coef_, X_train.columns, columns=['Cofficient'])\n","print(coeff_df)\n","print()\n","\n","print('Linear Intercept term: ',temp.intercept_) # This gives us the intercept term\n"],"metadata":{"id":"OwLPW5lRBgZH","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1697550419702,"user_tz":-330,"elapsed":10,"user":{"displayName":"Naman Malpani","userId":"03467115516653023208"}},"outputId":"03a6294b-43fa-4231-bb61-710048d61e02"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["                                              Cofficient\n","const                                           0.000000\n","branch-misses-instructions-normalize            0.129870\n","dTLB-load-misses-instructions-normalize         0.015783\n","dTLB-store-misses-instructions-normalize        0.000000\n","iTLB-load-misses-instructions-normalize         0.000000\n","L1-dcache-load-misses-instructions-normalize    0.072291\n","L1-icache-load-misses-instructions-normalize    0.000000\n","LLC-load-misses-instructions-normalize          0.069793\n","LLC-store-misses-instructions-normalize         0.000000\n","\n","Linear Intercept term:  [0.30900985]\n"]}]},{"cell_type":"code","source":["stack = []\n","# Base -\n","stack.append(temp.intercept_)\n","# Adding other parameters\n","for i in range(1, coeff_df.shape[0]) :\n","  champ = coeff_df.iloc[i, 0] * (df[cpi_stack[i]].mean())\n","  stack.append(champ)\n","\n","print(\"CPI Stack Sum : \", sum(stack) )\n","print(\"Mean of CPI : \", df['cpi'].mean())"],"metadata":{"id":"qLv26dq_CK7j","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1697550419702,"user_tz":-330,"elapsed":9,"user":{"displayName":"Naman Malpani","userId":"03467115516653023208"}},"outputId":"495fc2bc-4627-4524-a505-423592666cc1"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["CPI Stack Sum :  [0.42057524]\n","Mean of CPI :  0.4206167578458418\n"]}]},{"cell_type":"code","source":["cpi_stack_labels = ['const', 'branch-misses',\n","       'dTLB-load-misses',\n","       'dTLB-store-misses',\n","       'iTLB-load-misses',\n","       'L1-dcache-load-misses',\n","       'L1-icache-load-misses',\n","       'LLC-load-misses',\n","       'LLC-store-misses']\n","\n","prefix_sum = [stack[0]]\n","for i in range(1, len(stack)) :\n","  prefix_sum.append(prefix_sum[-1] + stack[i])\n","\n","# print(prefix_sum)\n","width = 0.35\n","plt.style.use('default')\n","fig, ax = plt.subplots()\n","fig.set_size_inches(8, 5)\n","for i in range(len(stack)-1, -1, -1) :\n","  ax.bar(width, prefix_sum[i], label = cpi_stack_labels[i], align='edge' )\n","  # ax.bar(width, prefix_sum[i])\n","\n","ax.set_ylabel(\"CPI\", fontweight='bold')\n","ax.set_title(\"CPI Stack\", fontweight='bold')\n","plt.legend(bbox_to_anchor=(0.3, 1.0), borderpad=2)\n","legend_properties = {'weight':'normal'}\n","plt.legend(prop=legend_properties)\n","\n","\n","plt.tick_params(\n","axis='x', # changes apply to the x-axis\n","which='both', # both major and minor ticks are affected\n","bottom=True, # ticks along the bottom edge are off\n","top=True, # ticks along the top edge are off\n","labelbottom=False) # labels along the bottom edge are off\n","\n","images_dir = \"/content/drive/MyDrive/Problem_2/cpi\"\n","\n","plt.savefig(f\"{images_dir}/parest_LR.jpeg\")\n","plt.show()\n","\n","\n","\n"],"metadata":{"id":"O3ye_ncaG01e","colab":{"base_uri":"https://localhost:8080/","height":452},"executionInfo":{"status":"ok","timestamp":1697550420358,"user_tz":-330,"elapsed":664,"user":{"displayName":"Naman Malpani","userId":"03467115516653023208"}},"outputId":"ce461292-b4c8-439e-892d-7ff7b379a881"},"execution_count":42,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}